{
  function joinSecondElements(arr) {
    return arr.map((element) => element[1]).join('');
  }
}

root
  = nodes:(node)* {
    return nodes.reduce((acc, node) => {
      // Null or undefined nodes are ignored.
      if (node === null || node === undefined) {
        return acc;
      }

      const len = acc.length;
      if (len > 0) {
        const lastNode = acc[len - 1];

        if (node.type === "content" && lastNode.type === "content") {
          // This joins the last two nodes if they are both content.
          const jointContentNode = {
            type: "content",
            value: lastNode.value + node.value
          };

          acc[len - 1] = jointContentNode;
          return acc;
        }
      }

      acc.push(node);
      return acc;
    }, []);
  }

node
  = comment / command / jsReturnExpression / jsExpression / content

comment
  = "{{!" (! ("}}") .)* "}}" consumeExtraNL {
    return null;
  }

command
  = ifStatement / forStatement / forEachStatement / switchStatement / pageBreak / question / defineStatements

// If Statement
ifStatement
  = condition:ifOpen root:root elseIfs:(elseIfStatement)* els:(elseStatement)? ifClose {
    const conditionals = [
      { condition, root },
      ...elseIfs
    ];

    if (els !== null) {
      conditionals.push(els);
    }

    return {
      type: "ifStatement",
      conditionals
    };
  }

ifOpen
  = "{{if " param:param "}}" consumeExtraNL {
    return param;
  }

elseIfStatement
  = "{{else " condition:param "}}" consumeExtraNL root:root {
    return {
      condition: condition === null ? { type: "boolean", value: true } : condition,
      root
    };
  }

elseStatement
  = "{{else}}" consumeExtraNL root:root {
    return {
      condition: { type: "boolean", value: true },
      root
    };
  }

ifClose
  = "{{endIf}}" consumeExtraNL

// For statement
forStatement
  = meta:forOpen root:root forClose {
    return {
      type: "forStatement",
      ...meta,
      root
    };
  }

forOpen
  = "{{for " from:param " " to:param itemName:(" " string:string {return string;})? "}}" consumeExtraNL {
    return {
      itemName: itemName === null ? "_item" : itemName.value,
      from,
      to
    };
  }

forClose
  = "{{endFor}}" consumeExtraNL

// For each statement
forEachStatement
  = meta:forEachOpen root:root forEachClose {
    return {
      type: "forEachStatement",
      ...meta,
      root
    };
  }

forEachOpen
  = "{{forEach " iterable:param itemName:(" " string:string {return string;})? "}}" consumeExtraNL {
    return {
      itemName: itemName === null ? "_item" : itemName.value,
      iterable
    };
  }

forEachClose
  = "{{endForEach}}" consumeExtraNL

// Switch statement
switchStatement
  = value:switchOpen [ \t\r\n]* cases:(switchCase)+ defaultCase:switchDefault? [ \t\r\n]* switchClose {
    return {
      type: "switchStatement",
      value,
      cases,
      defaut: defaultCase
    };
  }

switchOpen
  = "{{switch " value:param "}}" consumeExtraNL {
    return value;
  }

switchCase
  = "{{case " match:param "}}" consumeExtraNL root:root {
    return {
    	match,
        root
    };
  }

switchDefault
  = "{{default}}" consumeExtraNL root:root {
    return root;
  }

switchClose
  = "{{endSwitch}}" consumeExtraNL

// Page Break
pageBreak
  = "{{pageBreak}}" consumeExtraNL { return { type: "pageBreak" }; }

// Question
question
  = question:questionOpen options:questionOption+ questionClose {
    return {
      type: "question",
      question,
      options
    };
  }

questionOpen
  = "{{question}}" consumeExtraNL root:root {
    return root;
  }

questionOption
  = "{{option " label:param conditional:(" " con:param { return con; })? "}}" consumeExtraNL root:root {
    return {
      label,
      conditional: conditional === null ? { type: "boolean", value: true } : conditional,
      root
    };
  }

questionClose
  = "{{endQuestion}}" consumeExtraNL

// Define Statements
defineStatements
  = defineStatement / setStatement

defineStatement
  = "{{define " name:string " " value:param "}}" consumeExtraNL {
    return {
      type: "defineStatement",
      name: name.value,
      value
    };
  }

setStatement
  = "{{set " name:string " " value:param "}}" consumeExtraNL {
    return {
      type: "setStatement",
      name: name.value,
      value
    };
  }

params
  = paramPairs:(" " param)* {
    return paramPairs.map((element) => element[1]);
  }

param
  = string / number / jsParamExpression / boolean

string
  = "\"" stringContent:("\\\"" / (! "\"") .)* "\"" {
    let escapeNext = false;

    return {
      type: "string",
      value: stringContent.reduce((res, element) => {
        const char = element[1];
        if (escapeNext) {
          escapeNext = false;
          switch(char) {
            case "\\":
              return res + "\\";
            case "\"":
              return res + "\"";
          }
        }

        if (char === "\\") {
          escapeNext = true;
          return res;
        }

        return res + char;
      }, "")
    };
  }

number
  = [0-9]+ ("." [0-9]+)? {
    return {
      type: "number",
      value: Number(text())
    };
  }

boolean
  = ("true" / "false") {
    return {
      type: "boolean",
      value: text() === true
    };
  }

jsExpression
  = "<%" expr:(! "%>" .)+ "%>" consumeExtraNL {
    return {
      type: "jsExpression",
      value: joinSecondElements(expr)
    };
  }

jsReturnExpression
  = expr:jsParamExpression consumeExtraNL {
    return expr;
  }

jsParamExpression
  = "<%=" expr:(! "%>" .)+ "%>" {
    return {
      type: "jsReturnExpression",
      value: joinSecondElements(expr)
    };
  }

name
  = [A-Za-z_] [A-Za-z0-9_]* {
    return text();
  }

content
  = ("\\{{" / (! ("{{" / "<%") .))+ {
    const rawText = text();

    if (rawText.trim() === "") {
      return null;
    }

    return {
      type: "content",
      value: rawText
    };
  }

consumeExtraNL
  = "\n"?
